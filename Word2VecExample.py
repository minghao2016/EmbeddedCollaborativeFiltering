"""
Rec-sys Embedding Rec-sys prototyping

__author__:
    charles@qileap

"""
import datetime
import os

import numpy

from Word2Vec import TestAlpha
from utils.helper import GenTrainAndTestSet, Train

cur_dir = os.path.dirname(__file__)
project_root = os.path.join(cur_dir, '..')

if __name__ == "__main__":
    # best configuration for gift store data is window_size 5 dimension 30 or 50
    window_size = 10
    dimension = 50
    # seed = 0  # the random is useless here because the collection.count() has its own random
    # random.seed(seed)
    # https://archive.ics.uci.edu/ml/datasets/Online+Retail
    project = 'online_shopping'
    # project = 'movielens100k'

    # https://archive.ics.uci.edu/ml/datasets/Anonymous+Microsoft+Web+Data
    # project = 'microsoft'
    # project = 'kaggle'
    # http://labrosa.ee.columbia.edu/projects/musicsim/aotm.html
    # project = 'music'
    # Belgium retail market dataset
    # http://recsyswiki.com/wiki/Grocery_shopping_datasets
    # project = 'store'
    # project = 'artificial'
    # artificial data are generated by simulator module
    file_list = ['transaction_labelled', 'transaction_unlabelled', 'uniform_10000_1000', 'uniform_10000_10000'][1]
    file_list = [file_list]
    for source_file_name in file_list:
        # source_file_name = 'uniform_33000_285'
        model_prefix = source_file_name
        input_file_name = 'tr_'+model_prefix
        test_file_name = 'te_'+source_file_name
        scalar = 0.1
        sample = True
        print('project:',project)
        model_name = model_prefix+str(window_size)+str(dimension)
        transaction_folder = os.path.join(cur_dir, project)
        input_file_path = os.path.join(cur_dir, project, input_file_name)
        model_path = os.path.join(cur_dir, project, 'models', model_name+'.txt')
        test_file_path = os.path.join(cur_dir, project, test_file_name)
        print('scalar:',scalar)
        results = [list() for _ in range(9)] #list of list
        epoch = 1
        benchmarking_result = [list() for _ in range(epoch)]
        for _ in range(epoch):
            GenTrainAndTestSet(transaction_folder, source_file_name, verbose=True, ratio=0.9, is_first_col_index=False)
            Train(input_file_path, model_path, scalar=scalar,window=window_size, dim=dimension, sample=sample, use_gensim=True, workers=8)
            print('{0}\r'.format(str(_ * 100 / epoch)[:4] + '%'), end='')
            for ratio in range(1, 10):
                start = datetime.datetime.now()
                result = TestAlpha(model_path, test_file_path, ratio=ratio/10, topn=1, shuffle=True)
                end = datetime.datetime.now()
                benchmarking_result[_].append(end-start)
                # exit()
                results[ratio-1].append(result)
                # print(result)
        # print(results)
        results = [ (numpy.average(x), numpy.std(x)) for x in results]
        benchmarking_result = [sum(x, datetime.timedelta()) / epoch for x in benchmarking_result]
        print('lower bound',',','upper bound')
        for result in benchmarking_result:
            print(result)
        for result in results:
            avg, std = result
            # print(avg-std,',',avg+std)
            print(avg)
